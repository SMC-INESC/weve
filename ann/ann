#!/usr/bin/env perl

use strict; use warnings; use 5.010;
use Getopt::Long; use Pod::Usage;
use File::Basename; use File::Spec; use Cwd;

use Carp;
use JSON;
use Data::Dumper;

use version; our $VERSION = qv('0.0.1');

my @dai_files;
my @est_files;
my %annotations;

my $result = GetOptions(
    'dai-files|d=s{,}' => \@dai_files,
    'est-files|e=s{,}' => \@est_files,
    'annotations|a=s%' => \%annotations,
    'output|o=s'       => \$ARGV{output},
    _meta_options( \%ARGV ),
);

my %known_annotations = (
    echonest => 'json',
    echonest_analysis => 'json',
    beatsI   => 'beats',
    beatsII  => 'beats',
    audio    => '(mp3|oga|wav|m4a)',
    pfd      => 'pfds2',
    mtd      => 'microtd',
    ssd      => 'ssimd',
);

my %slurp_dispatch = (
    json  => sub { decode_json($_[0]) },
    beats => sub { [split m<\s+>, $_[0]] },
    mp3   => sub { Cwd::abs_path(File::Spec->catfile($_[1], $_[2])) },
    wav   => sub { Cwd::abs_path(File::Spec->catfile($_[1], $_[2])) },
    oga   => sub { Cwd::abs_path(File::Spec->catfile($_[1], $_[2])) },
    m4a   => sub { Cwd::abs_path(File::Spec->catfile($_[1], $_[2])) },
    map {
        $known_annotations{$_} => sub { [split m/\s+/, $_[0]] }
    } qw/pfd mtd ssd beatsI beatsII/
);

my ( $INH, $OUTH, $ERRH ) = _prepare_io( \%ARGV, \@ARGV );

my $rating_data = {};

if (exists $annotations{audio}) {
    for (keys %{get_filedata_from_dir($annotations{audio}, $known_annotations{audio})}) {
        $rating_data->{$_} = {
            ratings => {},
            subjects => {},
        };
    }
}

LOAD:
while (my ($dai_file, $est_file) = (shift @dai_files, shift @est_files)) {
    
    last unless defined $dai_file and defined $est_file;

    open my $DAI_FILE, '<', $dai_file or croak $!;
    my $dai_header = parse_dai_file_header($DAI_FILE);
    my $dai_data   = parse_dai_file_data($DAI_FILE);
    close $DAI_FILE or croak $!;

    my $est_data = parse_est_file($est_file);
    $rating_data = merge_rating_data( merge_dai_est($dai_header, $dai_data, $est_data) );
}

DECORATE:
while (my ($type, $directory) = each %annotations) {

    $rating_data = decorate_ratings_with_annotation_data(
        $rating_data,
        get_filedata_from_dir($directory, $known_annotations{$type}),
        $type,
    );
}

REPORT:
print $OUTH format_as_json($rating_data);



sub format_as_json {
    my ($data) = @_;

    return JSON->new->allow_nonref->utf8->pretty->encode(
        $data
    );
}

# ID: FD11
# Start [Datum + tid]: 2007-04-12 08:22:19
# Designfil: kalle2.dat
# DII-data [Nej (0)/Ja (1)] + [Samplingfrekvens (Hz)]: 0 [100]
# Ordordning [Ordinal (0)/Slumpad (1)]: 1
# Slumpad ordordning [Varje stimuli (0)/Statisk (1)]: 1
# Ord [Ursprungsordning=ord + slumpordning]: 
# 1 = R<F6>relseskapande 1 
# 2 = V<E4>lbekant 2 
# 3 = Bra 3 
# Stimuliordning [Ordinal (0)/Slumpad (1)]: 1
# Stimuli [IDNr, namn + index, Spelordning, l<E4>ngd (ms)]:
sub parse_dai_file_header {
    my ($DAI_FILE) = @_;

    my $header = q{};

    while (<$DAI_FILE>) {
        $header .= $_;
        last if m/^Stimuli\s/;
    }

    my ($id)                             = $header =~ m/ID: (\S+)/;
    my ($random_word_ordering)           = $header =~ m/\nOrdordning [^:]+: (\d)/;
    my ($random_word_ordering_is_static) = $header =~ m/\nSlumpad [^:]+: (\d)/;
    my ($random_stimuli_ordering)        = $header =~ m/\nStimuliordning [^:]+: (\d)/;

    my %words = ();

    my @words = $header =~ m/(\d+) = (\S+) (\d+)/g;

    while (@words) {
        my $initial_order = shift @words;
        my $word          = shift @words;
        my $random_order  = shift @words;
        $words{$word} = [$initial_order, $random_order];
    }

    return {
        id                             => $id,
        random_word_ordering           => $random_word_ordering,
        random_word_ordering_is_static => $random_word_ordering_is_static,
        random_stimuli_ordering        => $random_stimuli_ordering,
        words                          => \%words,
    };
}


# 1, greek01_12.wav 1 1, 1, 12168
sub parse_dai_file_data {
    my ($DAI_FILE) = @_;

    my %dai_data;

    while (<$DAI_FILE>) {

        last if m/^Stopp/;

        my ($id, $name, $genre_index, $genre_play_order, $play_order, $length)
        = $_ =~ m/(\d+), (\S+) (\d+) (\d+), (\d+), (\d+)/;

        $dai_data{$id} = {
            name             => $name,
            genre_index      => $genre_index,
            genre_play_order => $genre_play_order,
            play_order       => $play_order,
            length           => $length,
        };
    }

    return \%dai_data;
}

# 1       1       93      5       13      6       3       2
sub parse_est_file {
    my ($est_file) = @_;

    my @est_data;

    open my $EST_FILE, '<', $est_file or croak $!;
    while (<$EST_FILE>) {
        my @est_line = split /\s+/, $_;

        push @est_data, {
            id         => $est_line[1],
            play_order => $est_line[0],
            unknown    => [@est_line[2, 3, 4]],
            ratings    => [@est_line[5 .. @est_line - 1]],
        };              
    }
    close $EST_FILE or croak $!;

    return \@est_data;
}

sub merge_dai_est {
    my ($dai_header, $dai_data, $est_data) = @_;

    my %rating_data;

    my @words;
    my @indices;
    my $order_index = $dai_header->{random_word_ordering};

    while (my ($word, $order) = each %{$dai_header->{words}}) {
        unshift @words,   $word;
        unshift @indices, $order->[$order_index] - 1;
    }

    for (@$est_data) {
        my $id = $_->{id};
        my $name = basename( $dai_data->{$id}->{name}, qw/.wav .mp3/ );
        my %ratings;
        @ratings{@words} = @{$_->{ratings}}[@indices];

        $rating_data{$name}{id} = $id;

        my $subject_id = $dai_header->{id};

        $subject_id
        .= '*' until not exists $rating_data{$name}{$subject_id};            

        $rating_data{$name}{$subject_id} = \%ratings;
    }

    return \%rating_data;
}

sub merge_rating_data {
    my ($rating_data) = @_;

    state $merged_ratings;

    while (my ($stimuli_name, $stimuli_details) = each %{$rating_data}) {

        while (my ($subject_id, $subject_ratings) = each %{$stimuli_details}) {

            $merged_ratings->{$stimuli_name}{ratings}{$subject_id} = $subject_ratings;

        }
    }
    return $merged_ratings;
}

sub get_filedata_from_dir {
    my ($generic_dir, $extension) = @_;

    opendir my $GENERIC_DIR, $generic_dir or croak $!;
    my @generic_files = grep { m[\.$extension] } readdir $GENERIC_DIR;
    closedir $GENERIC_DIR or croak $!;

    my %generic_files;
    for my $generic_file (@generic_files) {
        my $ext = (split m[\.], $generic_file)[-1];
        my $key = basename($generic_file, ".$ext");
        my $val = do {
            local $/;
            open my $GENERIC_FILE, '<', File::Spec->catfile($generic_dir, $generic_file) or croak $!;
            $slurp_dispatch{$ext}->(<$GENERIC_FILE>, $generic_dir, $generic_file);
        };

        if ($extension =~ m[(mp3|wav|oga|m4a)]) {
            push @{$generic_files{$key}}, $val;
        }
        else {
            $generic_files{$key} = $val;
        }
    }

    return \%generic_files;
}

# "india07_12": {
# "response" : {
#     "track" : {
#         "bitrate" : 320,
#         "status" : "complete",
#         "samplerate" : 44100,
#         "release" : "",
#         "audio_summary" : {
#             "energy" : 0.518014684243669,
#             "danceability" : 0.390446102446801,
#             "mode" : 0,
#             "tempo" : 131.528,
#             "duration" : 12.17261,
#             "loudness" : -8.948,
#             "key" : 10,
#             "time_signature" : 1,
#             "analysis_url" : "https://echonest-analysis.s3.amazonaws.com:443/TR/TRKHYNE1304B36FE1F/3/full.json?Signature=Bx0pHv49hLHjsrflom4TD5rHmW0%3D&Expires=1306932579&AWSAccessKeyId=AKIAJRDFEY23UEVW42BQ"
#         },
#         "audio_md5" : "0d2da6110e641ab915061a791e52e7c3",
#         "artist" : null,
#         "analyzer_version" : "3.01a",
#         "id" : "TRKHYNE1304B36FE1F",
#         "title" : null,
#         "md5" : "0d2da6110e641ab915061a791e52e7c3"
#     },
#     "status" : {
#         "version" : "4.2",
#         "message" : "Success",
#         "code" : 0
#     }
# }
#}
# {
#                      'india07_12' => {
#                                        'ratings' => {
#                                                       'FD11' => [
#                                                                   [
#                                                                     '2',
#                                                                     '1',
#                                                                     '2'
#                                                                   ]
#                                                                 ]
#                                                     },
#                                        'id' => '27'
#                                      },
# }
sub decorate_ratings_with_annotation_data {
    my ($rating_data, $annotation_data, $type) = @_;

    while (my ($stimuli_name, $stimuli_data)
           = each %{$rating_data}) {

        if ('echonest' eq $type) {
            next if $annotation_data->{$stimuli_name}{response}{status}{code};

            $stimuli_data->{$type}
            = $annotation_data->{$stimuli_name}{response}{track};

            delete $stimuli_data->{$type}{audio_summary}{analysis_url};
        }
        elsif ('echonest_analysis' eq $type) {
            $stimuli_data->{analysis} = $annotation_data->{$stimuli_name};
        }
        elsif ($type =~ m/(ssd|mtd|pfd)/) {
            $stimuli_data->{descriptors}{$type}
            = $annotation_data->{$stimuli_name};
        }
        else {
            $stimuli_data->{$type}
            = $annotation_data->{$stimuli_name};
        }
    }
    return $rating_data;
}

sub _meta_options {
    my ($opt) = @_;

    return (
        'quiet'     => sub { $opt->{quiet}   = 1;          $opt->{verbose} = 0 },
        'verbose:i' => sub { $opt->{verbose} = $_[1] // 1; $opt->{quiet}   = 0 },
        'version'   => sub { pod2usage( -sections => ['VERSION', 'REVISION'],
                                        -verbose  => 99 )                      },
        'license'   => sub { pod2usage( -sections => ['AUTHOR', 'COPYRIGHT'],
                                        -verbose  => 99 )                      },
        'usage'     => sub { pod2usage( -sections => ['SYNOPSIS'],
                                        -verbose  => 99 )                      },
        'help'      => sub { pod2usage( -verbose  => 1  )                      },
        'manual'    => sub { pod2usage( -verbose  => 2  )                      },
    );
}

sub _prepare_io {
    my ($opt, $argv) = @_;

    my ($INH, $OUTH, $ERRH);
    
    # If user explicitly sets -i, put the argument in @$argv
    unshift @$argv, $opt->{input} if exists $opt->{input};

    # Allow in-situ arguments (equal input and output filenames)
    if (    exists $opt->{input} and exists $opt->{output}
               and $opt->{input} eq $opt->{output} ) {
        open $INH, q{<}, $opt->{input}
            or croak "Can't read $opt->{input}: $!";
        unlink $opt->{output};
    }
    else { $INH = *STDIN }

    # Redirect STDOUT to a file if so specified
    if ( exists $opt->{output} and q{-} ne $opt->{output} ) {
        open $OUTH, q{>}, $opt->{output}
            or croak "Can't write $opt->{output}: $!";
    }
    else { $OUTH = *STDOUT }

    # Log STDERR if so specified
    if ( exists $opt->{error} and q{-} ne $opt->{error} ) {
        open $ERRH, q{>}, $opt->{error}
            or croak "Can't write $opt->{error}: $!";
    }
    elsif ( exists $opt->{quiet} and $opt->{quiet} ) {
        use File::Spec;
        open $ERRH, q{>}, File::Spec->devnull
            or croak "Can't write $opt->{error}: $!";
    }
    else { $ERRH = *STDERR }

    return ( $INH, $OUTH, *STDERR = $ERRH );
}


__END__


=head1 NAME

 ann - Parse and decorate Guy Madison's M-skatt output files with additional annotations


=head1 SYNOPSIS

 ann [OPTION]... [-a [echonest|beatsI|beatsII|audio|pfd|mtd|ssd]=DIR]... -d DAI-FILES... -e EST-FILES...


=head1 DESCRIPTION

 Processes Guy Madison's M-skatt output *.dai (experiment description) and
 *.est (experiment data) files to native perl and json structures.

 Optionally fetches curated annotations from various services (Echo Nest for now)
 

=head1 OPTIONS

 -d, --dai-files    <list of N strings > list of filenames with .dai extension
 -e, --est-files    <list of N strings > list of filenames with .est extension
 -a, --annotations  [string=string pair] -a key=value, where key is one of:
                                             'echonest', 'beatsI', 'beatsII', 'audio', 'pfd', 'mtd', 'ssd',
                                         and value is a directory containing:
                                             '*.json', '*.beats', '*.beats', '*.mp3 '*.pfds2', '*.microtd', and '*.ssimd' files,
                                         respectively (This option can be repeated multiple times)
 -o, --output       [string]             output filename                          (STDOUT)
     --verbose      [integer]            print increasingly verbose error messages
     --quiet                             print no diagnostic or warning messages
     --version                           print current version
     --license                           print author's contact and copyright information
     --help                              print this information
     --manual                            print the plain old documentation page


=head1 VERSION

 0.0.1


=head1 AUTHOR

 Pedro Silva <pasilva@inescporto.pt>
 Sound and Music Computing Group
 Telecommunications and Multimedia Group
 INESC Porto


=head1 COPYRIGHT

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program. If not, see <http://www.gnu.org/licenses/>.

=cut
